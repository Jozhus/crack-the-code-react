{"version":3,"sources":["DynamicInput.tsx","Game.tsx","App.tsx","index.tsx"],"names":["DynamicInput","props","state","value","handleInput","bind","e","target","length","match","this","getValidValues","includes","updateGuess","parseInt","id","setState","Input","type","pattern","onChange","required","Component","Game","answer","guess","clues","inputFields","validValues","evaluate","restart","pool","newAnswer","newGuess","newInputFields","char","Math","floor","random","replace","push","key","uuid","reverse","newClues","newClue","join","partialCorrect","fullCorrect","forEach","index","newValidValues","Fragment","Col","Form","onSubmit","event","preventDefault","Button","onClick","map","clue","Row","JSON","stringify","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f651362b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Input } from \"reactstrap\";\r\nimport { IDynamicInputProps } from \"./models/IDynamicInputProps\";\r\nimport { IDynamicInputState } from \"./models/IDynamicInputState\";\r\n\r\nclass DynamicInput extends Component<IDynamicInputProps, IDynamicInputState> {\r\n\r\n    constructor(props: IDynamicInputProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            value: \"\"\r\n        };\r\n\r\n        this.handleInput = this.handleInput.bind(this);\r\n    }\r\n\r\n    private handleInput(e: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (e.target.value.length > 1\r\n            || (e.target.value.length !== 0 && !e.target.value.match(/[0-9]/g))\r\n            || !this.props.getValidValues().includes(e.target.value)) return;\r\n\r\n        this.props.updateGuess(parseInt(e.target.id) - 1, e.target.value);\r\n        this.setState({ value: e.target.value });\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <Input\r\n                id={this.props.id}\r\n                type=\"text\"\r\n                pattern=\"[0-9]\"\r\n                onChange={this.handleInput}\r\n                value={this.state.value}\r\n                required\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport { DynamicInput };\r\n","import React, { Component } from \"react\";\r\nimport { Button, Col, Form, Row } from \"reactstrap\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { DynamicInput } from \"./DynamicInput\";\r\nimport { IClue } from \"./models/IClue\";\r\nimport { IGameProps } from \"./models/IGameProps\";\r\nimport { IGameState } from \"./models/IGameState\";\r\n\r\nclass Game extends Component<IGameProps, IGameState> {\r\n    constructor(props: IGameProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            answer: \"\",\r\n            guess: [],\r\n            clues: [],\r\n            inputFields: [],\r\n            validValues: \"\"\r\n        };\r\n\r\n        this.getValidValues = this.getValidValues.bind(this);\r\n        this.evaluate = this.evaluate.bind(this);\r\n        this.updateGuess = this.updateGuess.bind(this);\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        this.restart(this.props.length);\r\n    }\r\n\r\n    // Length should be restricted between 0 and 10.\r\n    private restart(length: number): void {\r\n        let pool: string = \"0123456789\";\r\n        let newAnswer: string = \"\";\r\n        const newGuess: string[] = []\r\n        const newInputFields: JSX.Element[] = [];\r\n\r\n        for (; length > 0; length--) {\r\n            const char: string = pool[Math.floor(Math.random() * pool.length)];\r\n            pool = pool.replace(char, '');\r\n            newAnswer += char;\r\n            newGuess.push(' ');\r\n\r\n            newInputFields.push(\r\n                <DynamicInput\r\n                    key={uuid()}\r\n                    id={`${length}`}\r\n                    getValidValues={this.getValidValues}\r\n                    updateGuess={this.updateGuess}\r\n                />\r\n            );\r\n        }\r\n\r\n        this.setState({ answer: newAnswer, guess: newGuess, clues: [], inputFields: newInputFields.reverse(), validValues: \"0123465789\" });\r\n    }\r\n\r\n    private evaluate(): void {\r\n        const newClues: IClue[] = [...this.state.clues];\r\n        let newClue: IClue = {\r\n            guess: this.state.guess.join(''),\r\n            partialCorrect: 0,\r\n            fullCorrect: 0\r\n        };\r\n\r\n        this.state.guess.forEach((char: string, index: number) => {\r\n            if (char === this.state.answer[index]) {\r\n                newClue.fullCorrect += 1;\r\n            } else if (this.state.answer.includes(char)) {\r\n                newClue.partialCorrect += 1;\r\n            }\r\n        });\r\n\r\n        newClues.push(newClue);\r\n\r\n        this.setState({ clues: newClues });\r\n    }\r\n\r\n    public getValidValues(): string {\r\n        return this.state.validValues;\r\n    }\r\n\r\n    public updateGuess(index: number, value: string): void {\r\n        const newGuess: string[] = [...this.state.guess];\r\n        let newValidValues: string = \"0123456789\";\r\n        newGuess[index] = value;\r\n\r\n        newGuess.forEach((guess: string) => {\r\n            newValidValues = newValidValues.replace(guess, '');\r\n        });\r\n\r\n        this.setState({ guess: newGuess, validValues: newValidValues });\r\n    }\r\n\r\n    public render(): JSX.Element {\r\n        return (\r\n            <React.Fragment>\r\n                <Col>\r\n                    <Form onSubmit={(event: React.ChangeEvent<HTMLFormElement>) => { event.preventDefault(); }}>\r\n                        {this.state.inputFields}\r\n                        <Button\r\n                            onClick={this.evaluate}\r\n                        >\r\n                            Try\r\n                        </Button>\r\n                    </Form>\r\n                </Col>\r\n                <Col>\r\n                    {this.state.clues.map((clue: IClue) => {\r\n                        return (\r\n                            <Row>\r\n                                <div>{JSON.stringify(clue, null, 3)}</div>\r\n                            </Row>\r\n                        );\r\n                    })}\r\n                </Col>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Game };\r\n","import React, { Component } from \"react\";\r\nimport { Game } from \"./Game\";\r\n\r\nclass App extends Component {\r\n\r\n  public render() {\r\n    return (\r\n      <Game length={3} />\r\n    );\r\n  }\r\n}\r\n\r\nexport { App };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { App } from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}